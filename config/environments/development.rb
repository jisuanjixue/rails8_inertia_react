require "active_support/core_ext/integer/time"

Rails.application.configure do
  config.after_initialize do
    Bullet.enable = true
    Bullet.alert = true
    Bullet.bullet_logger = true
    Bullet.console = true
    Bullet.rails_logger = true
    Bullet.add_footer = true
  end

  # Settings specified here will take precedence over those in config/application.rb.
  # 基础配置
  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true # 代码修改后立即生效，无需重启服务器

  # Do not eager load code on boot.
  config.eager_load = false # 不预先加载所有代码，加快启动速度

  # Show full error reports.
  config.consider_all_requests_local = true # 显示完整错误信息
  # config.routes.default_url_options = {host: "localhost", port: 3000}
  # Enable server timing.
  config.server_timing = true # 启用服务器性能计时

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  # 缓存配置
  # 根据tmp/caching-dev.txt文件是否存在来切换缓存
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.cache_store = :solid_cache_store
  else
    config.action_controller.perform_caching = false
    config.cache_store = :null_store
  end

  # Change to :null_store to avoid any caching.
  # config.cache_store = :memory_store

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local # 本地存储上传文件

  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false # 忽略邮件发送错误

  # Make template changes take effect immediately.
  config.action_mailer.perform_caching = false

  # Set localhost to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = {host: "localhost", port: 3000} # 邮件中的链接使用localhost

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log # 记录弃用警告

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true # 高亮触发数据库查询的代码

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true # 高亮触发后台任务的代码

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true # 在渲染的视图中标注文件名

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true
  config.action_cable.disable_request_forgery_protection = true
  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!

  config.file_watcher = ActiveSupport::EventedFileUpdateChecker # 文件变化监听器

  # https://vite-ruby.netlify.app/guide/troubleshooting.html#safari-does-not-reflect-css-and-js-changes-in-development
  # https://bugs.webkit.org/show_bug.cgi?id=193533
  config.action_view.preload_links_header = false # 解决Safari的CSS/JS刷新问题

  # 性能分析模式(PROFILE环境变量启用时)
  if ENV["PROFILE"]
    config.cache_classes = true
    config.eager_load = true

    config.logger = ActiveSupport::Logger.new($stdout)
    config.log_level = :info

    config.public_file_server.headers = {
      "Cache-Control" => "max-age=315360000, public",
      "Expires" => "Thu, 31 Dec 2037 23:55:55 GMT"
    }
    config.assets.compile = false
    config.assets.digest = true
    config.assets.debug = false

    config.active_record.migration_error = false
    config.active_record.verbose_query_logs = false
    config.action_view.cache_template_loading = true
  end

  config.active_job.queue_adapter = :solid_queue
  config.solid_queue.connects_to = {database: {writing: :queue}}
  config.solid_queue.logger = ActiveSupport::Logger.new(STDOUT)

  config.solid_errors.connects_to = {database: {writing: :errors}}
  config.solid_errors.send_emails = true
  config.solid_errors.email_from = ""
  config.solid_errors.email_to = ""
  config.solid_errors.username = Rails.application.credentials.dig(:solid_errors, :username)
  config.solid_errors.password = Rails.application.credentials.dig(:solid_errors, :password)

  config.after_initialize do
    ActiveRecord::Tasks::DatabaseTasks.prepare_all
  end
end
